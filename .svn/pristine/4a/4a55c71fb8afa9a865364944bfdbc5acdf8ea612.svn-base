/**
 * ***************************************************************
 * JADE - Java Agent DEvelopment Framework is a framework to develop
 * multi-agent systems in compliance with the FIPA specifications.
 * Copyright (C) 2000 CSELT S.p.A.
 * 
 * GNU Lesser General Public License
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation,
 * version 2.1 of the License.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA  02111-1307, USA.
 * **************************************************************
 */
package multiagent.agents;

import jade.core.Agent;
import jade.core.AID;
import jade.core.behaviours.Behaviour;
import jade.core.behaviours.FSMBehaviour;
import jade.core.behaviours.OneShotBehaviour;
import jade.core.behaviours.SequentialBehaviour;
import jade.core.behaviours.TickerBehaviour;
import jade.lang.acl.ACLMessage;
import jade.proto.AchieveREInitiator;
import jade.domain.FIPANames;

import java.util.Date;
import java.util.Vector;

import com.sun.corba.se.spi.orbutil.fsm.FSMTest;


/**
   This example shows how to implement the initiator role in 
   a FIPA-request interaction protocol. In this case in particular 
   we use an <code>AchieveREInitiator</code> ("Achieve Rational effect") 
   to request a dummy action to a number of agents (whose local
   names must be specified as arguments).
   @author Giovanni Caire - TILAB
 */
public class SellerRE extends Agent {
	private int nResponders;
	
  protected void setup() {
	 Behaviour ticker=new CheckBehaviour(this,1000,"","item_trade",""){
		 public int onEnd() {
				return 0;
			} 
	 };
	 Behaviour ticker2=new OneShotBehaviour() {
		
		@Override
		public void action() {
		System.out.println("第二个，转到第一个");
			
		}

	};

	 FSMBehaviour FSMTest =new FSMBehaviour(this);
	 FSMTest.registerFirstState(ticker,"X");
	 //FSMTest.registerLastState(new OperationYBehaviour(),"Y");
	 FSMTest.registerState(ticker2,"Z");
	// FSMTest.registerTransition("X", "Y", 1);
	 FSMTest.registerTransition("X", "Z", 0);
	 FSMTest.registerDefaultTransition("Z", "X", new String[]{"X", "Z"});

	 this.addBehaviour(FSMTest);
	 
	
	
  }
}

